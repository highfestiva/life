Business
---------
- Estimate market.
- Calculate number of copies you'd like to sell to make some $$$. How much is this title worth?
- Make a game web site, following Seth's guidelines.
- Make a company web site, following Seth's guidelines.
- Check out what online payment systems there are and pick a good one.
- Hand out to friends and family. Gather feedback. FIX!
- Make X demo CDs. Burn, lightscribe, print and package.
- Talk to Bolibompa.se.
- Talk to toy store owners, game shop managers, etc.


Game
---------
+ Better friction on tires.
+ Reduce TCP collision packets sent when having multiple collisions in quick sequence.
+ Create excavator that can "dig".
+ Make sphere work again.
+ Fix multi-splitscreen-controls (including save of settings files).
+ Move system settings file execution into master ticker.
+ Write settings file every time, add user settings file.
+ Import vehicle colors.
+ Flip axes correctly in CppContextObject and UI ditto.
+ Create arcade-style helicopter.
+ Add help text when dropping down console.
+ Create base world. Use mesh, not primitives, for collision. (Modelling, import, load and engine.)
+ Load objects dynamically, without having to hard-code an account and class/phys/meshes name.
+ Create fork-lift.
+ Create UI for picking new vehicle. Don't auto-pick when logging in!
  + Use road signs as buttons.
  + Have a road sign for each vehicle.
  - Texture map road signs with corresponding pic.
  - Use road signs (think high way green) for other settings as well: nationality, number of splitscreen users, fullscreen, online play...
  - Show big title text (translated) for all buttons.
  + Hilight current selection where applicable. Hilight using red/blue signs instead of red/yellow. (Different solution picked.)
+ Make it possible to be logged in without vehicle. Make it possible to drop vehicle.
. Fix bug: road sign for first vehicle is "squashed" when having 3 split-screen players.
. Create material that can easily can be picked-up, loaded and moved around.
. Create crane that can pull wire up.
. Bug fix attachments (i.e. crane picks up car) so that they work properly (without crashing).
+ Add wind mill to world.
. Add server-triggered garage door to world. Make sure trigger coding is easy!!!
. Add elevator to world. Trigger five seconds when after the vehicle enters zone.
+ Add possibility to easily change vehicle during play.
. Take some action when falling over the "edge of the World".
. Make vehicle flip over to correct rotation whenever it accidentally flipped to its side/front/back.
. Add options menu.
. Picking best possible default control options.
. Adjust the camera view according to the vehicle: huge crane, small ball...
. Make login adjusted to this type of game (automatic somehow).
. Show logo when starting game.
. Make a "what you're missing out on when not running Pro" end screen in demo version. (=release client?)
. Add link to home page in demo end screen.
. Update and adjust what messages are shown on screen when starting up.
. Make a start screen with all settings. Start screen heavily fogged.
. Implement the following settings in the heavily fogged start screen:
  - Nationality (switched real time).
  - Full screen / windowed.
  - Start locally -> select number of splitscreen players. Slider for green-ness.
  - Start online: in own server, on someone else's server, usernames, passwords.
. Implement the following in the end screen as "what you're missing out on":
  - Robot on wheels.
  - Towing truck.
  - Huge UFO which can have vehicles parked inside while flying!
  - Football.
  - Big world.
  - Play online - and make sure that you add tag line "you can play with your kids even if you travel".
. Implement the following settings ingame:
  - Controls (joysticks, control pads, wheels, keyboards...)
  - Change vehicle.
. Make a "change avatar" functionality.
  - When abandoning a vehicle, the vehicle remains in the world.
  - If there IS a vehicle and it is NOT OCCUPIED of the type that is requested, use it, otherwise create a new one.
. Server regularly checks vehicles that don't seem ok (flipped, i.e. "up not pointing up", etc). If the "un-ok" vehicle is unused for x consecutive checks, remove it.
. Create icon for the game.

- Add different physical worlds on all sides of the box, and add gravity change! Cewlness x 0x1000000!!!
- Add login progress bar.


Engine
----------
+ Make sure that splitscreen1 sees that splitscreen2 logs out.
+ Only render "red send square" when debug flag is enabled.
+ Add rendering of "green receive square" when receiving positional data.
+ Fix splitscreen lag. Currently not acceptable.
+ Fix initial-drag-on-client-window-generates-GUI-click.
+ Don't allow client to send out a change in physics state (transform+vel+acc) when colliding, this should be done by the server.
+ Add more input controllers: mouse, joy, pad... Add both force and max-vel to interface?
+ Separate up/down from handbreak/break. Create GTA-steering!
+ Change controls to be more dynamic. For instance: control breaks by means of using roll engine force (re-use engine).
+ Fix so that TAB in GUI does not enter an empty char.
+ Make sure Delete key in GUI deletes a char at once, not at next caret update time.
+ Simple <enter> to "click" default button in dialog (especially true for login).
+ Fix calibration end-values from start (at least on Win32).
+ GUI border corners are not rendered. Fix!
+ Currently all geometry (mesh) instances are visible when running splitscreen. Remove all but one.
+ Make sure that meshes are reused, such as wheels on the vehicles.
+ Make import tool position all jointed objects correctly (currently seems to disregard some offset - such as own scaling - cause e.g. truck_01 wheels to be misplaced).
+ Make friction parameters in import ortogonal against mass.
+ Add basic material loading (ambient, diffuse, specular).
+ Update ODE to 0.11.whatevah.
+ Make import tool position vehicle at [z + distance from origin to lowest mesh point on vehicle].
+ Creating physics objects as resources.
+ Create an import thingie/module for graphics/physics - must be included in C++.
+ Loading physics objects from disk.
+ Loading graphics objects from disk.
+ Make ODE wheels keep straight using dBodySetFiniteRotationMode() and dBodySetFiniteRotationAxis() instead of a friggen motor!
+ Fix laggy/jerky camera motion by interpolation/extrapolation. Cam adjusts interpolation factor to velocity?
+ Make SystemPainter a standalone class that does not inherit UiTbc::Painter!
+ Remove all possible classes to enable easier porting.
+ Make sure that synchronizing doesn't happen every frame on the heli when a control is changed!
+ Make input configuration better - use other type of ID than enumeration??? I'm a bit unsure here...
+ Add support for "http links". I.e. start browser at specific address.
+ Load+save calibration.
+ Exchange SoundManager basics to a portable one.
+ Make physics manager (ODE) work with >1 simultaneous thread.
+ Update server port in Linux.
+ Port client to Linux.
+ Add phys_capsule as allowed shape in the import tool and load part in engine.
+ Add support for moving stuff in static world (elevator, wind mill, etc).
+ Add loading of all formats, especially world format.
+ Try to fixate hardware devices, so that Device0 doesn't mean game pad one day and joystick the next.
+ Fix cursor in GUI (used to cause XOR problems).
+ Move over to MSVC9.
+ Logging on in two steps: a) normal login, server returns avatars, and b) enter world by selecting avatar. (After (a) the sync goes.)
. Port client to Mac OS X / Cocoa.

. Create ability for lossless UDP transfers.
. When having several control units, the "input threshold" does not work. Make a threshold for each input entity.
. Sound is not deleted when logging out/in!
. Make proper sounds, so that all vehicles are heared. Even if they have the exact same .wav file. (Or not.)
. Remove game source code from engine source code: camera, hard-coded object placements, input handling, etc.
. Spawn points. Matching against vehicle types...
. Add UV-maps to the import tool.
. Make importer capable of getting texturing.
. Make export script (Maya) auto-run before save.
. Creating a less jittery experience: a) sync lag/jitter immediately after logging in, b) sorting out old msgs on client, c) keeping track of jitter on client side.
. Moving out platform specifics from (Ui)CppContextObject.cpp to LifeXxx.cpp.
. Spawn engine and load world. Must be able to manage both.
. Add some type of spawn engine for player vehicles.
. Use a zipped archive for data.
. Restrict flying to a certain height. Going above = all engines off.
. Add "switch to splitscreen" by buttonpress ingame.
. Use animated texture instead of wheels for excavator/bandwagon.
. Sounds. Music.
. Endianify all Chunky saves/loads.
. Disabling keyboard steering when any splitscreen console window is down.
. Chat - client side UI.
. Text/console clients, plural. Run in same process.
. Include server in same binary.
. Include (optional) object position when creating an object over the network.
. Add context-sensitive and more degrees of freedom for control mechanisms: ball+ufo needs analogue fwd-bkg, cranes, excavators, etc.
. Wrap physics frame counter (game could go on forever).
. Port input handling, calibration and names.
. Design GUI. Menus as well as toolbars during play. Also icons for picking vehicle.
. Make sure memfile log always gets everything (including trace+debug+performance). Tail contents to con and file upon crash.
. Improve vehicle wheel friction.
. Do not resend positional info frequently when pushed/collided similarly (i.e. excavator holding down monster truck).
. Make sure that analogue input devices are thresholded, so they don't cause constant socket transmits when moved.
. Add support for a demo version, which among other things has an end screen, and some disabled features.
. In demo version, add "termination attempt goes to end screen".
. Make scene recording functionality that:
  - Stores all key presses and time stamps.
  - Every n seconds stores all object states at time stamps (so that randomized replay can start from any of those time stamps).
  - Use for start/end screen.
. Make replay functionality for start/end screen.
. Clear top of log files when too big. Preferrably copy to .log.old and start a new one.
. Add GCC build targets for debug, rc, final. Update build script.
. Install X11 on my computer... Yarrrghhh... Mongooooolllll!!!!..........
. Port client to X11.
. Port Posix' SystemManager (mostly placeholders at the moment).
. Port font rendering to X11.
. Use game icon and make it happen on Windows, Mac, iPhone, X11...
. Make sure camera never flies under ground.

- Make camera always keep a free line of sight to the controlled object.
- Creating group/world objects as resources.
- Loading group/world objects from disk.
- Create a master server, which at first only receives user feedback.
- Add questionaire to end of demo game (=release client?). Send answers to master server.

 
Quality
----------
+ Fix ODE box rotation bug by simply keeping the angular velocity below a certain threashold.
+ Fix bug sometimes induced on Excavator: server says it stops on each frame!
+ Make key settings save as strings, not as numbers in the console save files.
+ Resetting the "threadsafe" flag in the right place/thread after the physics thread is done (not in physics thread, but in main).
+ Testrun in lower frame rates! Make sure sim works in 3 Hz!
+ Make framerate smooth, don't sleep a fixed number of milliseconds per frame. Ensure non-shaking excavator.
+ Remove shakes when a strong motor tries to hold a wheight (such as the hoe of a front loader).
+ Update concept of performance measurements; those which are dynamically laid out as called in hierarchy. Use "copy on write" with pointer ref to hash table to avoid thread clashes.
+ Debug graphs and follow-up optimization.
+ Check if it's possible to physical model wheels with cylinders instead of spheres in ODE 0.11.1. --- RESULT: NOT POSSIBLE!
+ Optimize font rendering.
+ Show debug graphs and FPS also in split screen.
+ Make the console appear the correct size (immediately when bringing it up) after having added/removed splitscreen player (currently appears smaller if splitscreen player previously removed).
+ Get unicode on track. Make script files all UTF-8.
+ Always use unicode script files (UTF-8).
+ Add unit test for making sure that loading more than one instance of same resource results in a single instance.
+ Replace copyright notice to Righteous Games.
+ Shorten code by typedeffing the Lepra::String, Lepra::StringUtility, Lepra::uint8 and so forth in all namespaces.
+ Make build in one step: server, client, **DATA**, stlport, Linux, Windows...
+ Assertions on getting access to wrong parts of the system with the wrong thread. (Such as dropping users in NetworkServer.cpp from the TCP thread.)
+ Run test app in Windows and Linux.
+ Stresstest (use .lsh).
+ Check optimizations quickly.
+ Run Simian Analyzer, remove duplicate code.
+ Exchange "varning: flerteckens teckenkonstant" (ChunkyLoader.h) to something portable and beautiful.

. Make splitscreens "slide up" instead of just popping up!
. Make sure default settings are good on a no-good computer. Like 60 FPS.
. Make sure shutting down client with two simultaneously logged-in users gets logged out from the server.
. Make font rendering look good instead of ugly.
. Add better camera control, such as for the truck (just looking at the trailer looks like shit).
. Being able to log in/out on one splitscreen while running normally on the other (no freeze).
. Don't allow program to become unresponsive when starting up (alt-tab away and back). Related to some other issue in this list.
. Print game version number to log when starting.
. Add support for checking if loaded controller configuration contains devices no longer present in the system when starting, and if so reset 'em.
. Add support for auto-configuring best controller configuration.
. Produce autostarting autotest after commit. Run in Linux at least.
. Give feedback while logging in. Especially after a few seconds of nothingness.
. Check heap regularly (using _heapchk() in Win32).
. Add relevant thread safety to classes here and there (NetworkServer, for instance). Add interfaces to isolate functionality. Use Sigges design pattern.
. Add crash control.
. Add handling of ODE crashes (numerical overflow, etc).
. Start alpha-testing with human users.
. Go through all TODOs.
. Fix all source file header comments (Righteous games, 2010).
. If clicking "slowly" the game starts with the mouse state shown as "down". Perhaps the same applies when clicking in another app? This makes it inpossible to click a button on the first attempt after going back to the game.
. Rename PhysicsEngine and ChunkyXxx classes to sensible names.
. Verify that destruction of ContextObject during load does not cause an invalid resource to float around the resource manager.
. Fix engine mode "half_lock" (or make it synchronized or otherwise improved).
. Add click sounds to buttons.
. Go over demo version and release version, making sure that all functionality is in place.
. Automatically downsize rendering (shadows) and physics micro steps if FPS are low. Runtime optimize by turning off pixel shaders, shadow volumes, etc.
. Check that all log destinations write strings, not raw data, to disk. LogFileXxx (single one) was checked and corrected from WriteData() to WriteString().
. Get licences in order. Both C++ and Python. Both mine and third party.
. Separate input and output data in the data folder. Create a proper directory structure for external release.
. Descide how to accomodate several split-screen sound "listeners" on OpenAL. Implement.
. Remove unused rtvars (such as Ui.2D.PaintMode).
. Remove all memory leaks.
. Test thoroughly!
. Polish.
. Refactor.
. Go through all RG e-mail to ensure all is in place.
| Test with "simulating" single CPU system. (Don't put me out, place me at bottom of checklist.)
| Test with corrupt/missing resources. (Don't put me out, place me at bottom of checklist.)
| Test run server on Linux, client on Windows.

- When input is hindered (such as when pulling joystick back, then taking down the console) the excavator behaves jerkily.
- Assertions on high and stable frame rate. Includes the network sliding average frame rate (should be filtered?).
- Create and use "lag socket" (sys_socket through factory?).
- Port to D3D rendering + painter. Painter only needs working fonts?
- Create a small master server which receives crash reports and feedback.
- Create feedback form which can be entered and transmitted by any user at any time. Received by master server.
- Perhaps (?) add ogg/vorbis support if music is wanted.
