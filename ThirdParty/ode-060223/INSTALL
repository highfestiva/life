
ODE NOW HAS AUTOTOOLS SUPPORT!!!!

if you want to build ODE with autotools follow these steps, if not skip ahead:

(0) if you are building from CVS you must bootstrap the process first
    by running:

    $ sh autogen.sh

    you may see some "underquoted definition" warnings depending on your
    platform, these are (for now) harmless warnings regarding scripts 
    from other m4 installed packages.

(1) The default build process builds ODE with single precision, no trimesh
    support, and debug enabled (leaves OPCODE out), if this is what you want,
    simply run:

    $ ./configure

    double precision is enabled with the argument --with-double-precision
    opcode support is enabled with the --with-opcode argument, and finally,
    a release build is enabled with --enable-release.
    So, if you want to build ODE with trimesh support, you would run:

    $ ./configure --with-opcode

    if you want to build ODE with trimesh support and double precision:

    $ ./configure --with-double-precision --with-opcode

    etc, each of these arguments are independent of each other.
    In addition the option --with-arch= allows the user to pass the
    -march flag to GCC, in order to tune the library for a particular
    architecture, the argument --with-arch= takes are the ones listed on the
    this page for -mtune: 
    http://gcc.gnu.org/onlinedocs/gcc-3.4.1/gcc/i386-and-x86-64-Options.html#i386%20and%20x86-64%20Options
    Note that the link points to posible values for Intel processors, 
    but other processors are also supported, check the page for your particular
    processor to see what parameters can be passed to -march in your case.

(2) Run:

    $ make

(3) To install the library run:

    $ make install

Autotools Notes:

1. Automake 1.8.x or higher is required in order to build ODE
   using autotools, some Linux distributions (Debian) may install
   by default a lower version even if there are packages for higher versions,
   make sure you have the correct one.
2. Currently because of the nuisances of the Windows DLL system shared 
   libraries are disabled, so autotools will build a static library only, 
   on non Windows systems, you can get a shared library by adding the 
   argument --enable-shared to the configure script.
3. the autotools build process creates and installs a 'ode-config' script
   similar to that of gtk, useful for passing cflags and libs to your projects,
   run ode-config from a command prompt to find out how it works.
4. The initial autotools build support was written by 
   Rodrigo Hernandez (kwizatz at aeongames.com) feel free to contact me,
   if you have any questions regarging the ODE autotools scripts.


And here are the steps to build ODE without autotools:

(0) if you're using Microsoft's Visual C++ compiler, you have the option
    of using the workspace and project files in the VC6 subdirectory,
    or you can follow the instructions below.    

(1) get the GNU 'make' tool. many unix platforms come with this, although
    sometimes it is called 'gmake'. a version of GNU make for windows
    is available at: http://q12.org/ode/bin/make.exe

(2) edit the settings in the file config/user-settings. the list of supported
    platforms is given in that file.

(3) run 'make' to configure and build ODE and the graphical test programs.
    to build parts of ODE the make targets are:

	make configure		create configuration file include/ode/config.h
	make ode-lib		build the core ODE library
	make drawstuff-lib	build the OpenGL-based graphics library
	make ode-test		build some ODE tests (they need drawstuff)
	make drawstuff-test	build a test app for the drawstuff library

    all of these targets will do an implicit 'make configure'. if the
    configurator screws up then you can edit the settings directly in
    include/ode/config.h.

(4) to install the ODE library onto your system you should copy the 'lib' and
    'include' directories to a suitable place, e.g. on unix:

	include/ode  --> /usr/local/include/ode
	lib/libode.a --> /usr/local/lib/libode.a
