Code standard of The Sparetime Project

This is the enlightened code standard for The Sparetime Project, and it IS NOT subject to unintelligent discussion. :o)

Code standard rules

1. Methods do not have to appear in the same order in the .h file as in the .cpp file.

2. Methods that handle the same data, or have much in common, should be placed close to each other in the .h and in the .cpp file. Methods that are placed close to each other should not be separated by blank lines in the .h, and only by 1 line in the .cpp. All other stuff is separated by 3 blank lines.

3. The keyword "this->" should not precede member methods calls nor member variables.

4. Name spaces should be used. Explicitly specify namespace - do not use the keyword "using namespace".

5. Context prefix should be used for:
	a. Global variables:		g_
	b. Member variables:		m_
	c. Parameter variables:		p_
	d. Local variables:		l_
	e. Static members:		sm_
	f. Static local variables:	sl_

6. No type prefix should be used.

8. Only one instance should be declared per line. Exception: when declaring counter variables in a for-statement, multiple variables may be declared on the same line.

9. Declarations within a for-statement are only allowed if the variables declared are used only within the for-loop. Otherwise the variables must be declared before the for-statement. This is done to avoid conflicts between different compilers.

10. The pointer asterisk (*) should be placed next to the type, not next to the variable.

11. Use CamelCaseNotation. The first letter in each word of most identifier names (class names, variable names, function names, method names, enum types etc) should be upper case. The other letters should be lower case. Note that the prefix should be lower case.

12. All const instances, enum constants and #defines should be in uppercase, non-plural with an underscore between each word (with 
exception for § 14). Observe that enum typenames should be written according to § 11 (e.g. enum MyEnum { CONST1 = 0, CONST2 = 4 };).

13. #defines must only be used for macros and precompile directives, not for data. Strongly prefer inline methods or -functions to macro definitions.

14. Precompile directives for the compile-path (where using the file name) should be the same as the file name, prefixed with namespace, with only one underscore, instead of the dot in .h: "NAMESPACE_CLASS_H".

15. Class names must not be prefixed.

16. All statements after a start-brace must be indented eight spaces (one TAB) more until the end-brace is reached. All braces must lie on the same indenting as the statement preceding and succeeding them.

17. The usage of spacing in methods (definitions, declarations and calls) is restricted to after comma, where one space must be present.

18. Line feeds within methods (definitions, declarations and calls) can be placed at the end of the line, or where the line is concidered long enough. The 2nd and all following lines should be intended one step compared to the first line.

19. Comments and identifiers should be in plain American English (e.g. "initialize the colored neighborhood near the harbor" instead of "initialise the coloured neighbourhood near the harbour").

20. Comments should have a capital letter in the beginning of a sentence and a dot at the end (most of you should have learned this in your early school years). :o) 

21. Typecasts should not have a space after them (before the variable they cast). Prefer using the new C++ casting operations (e.g. static_cast<typename>(expression)) to the old method of C-style casting using parantheses.

22. Method declarations should, if followed by a "const" and/or "= 0", have a space after them.

23. Never precede colon with the space character (just as in normal writing). The same applies to dot, colon and question mark. The only exception is the colon-separator (as used in the ?:-statement: {x? y : z};

24. The "public:", "protected:" and "private:" keywords should be used ONLY ONCE in each class declaration (and in the order specified). Exception: When there are fairly large conditionally compiled sections of a class declaration, you can use (two) or more sets of access specifiers to make the conditionally compiled declarations appear close together in the .h-file.

25. Keyword "virtual" should not be used other than when the method is intended to be overridden, never otherwise.

26. Be aware of the fact that the destructor of the base class(es) must be virtual when a class is being derived from.

27. "#ifdef LEPRA_WINDOWS"/"#ifdef LEPRA_GCC"/"#ifdef LEPRA_MSVC_X86"-"#endif" or similar preprocessor checks must contain non-portable stuff in non-target specific files.

28. Non-portable stuff as "__fastcall" should be used with care, and only used in such a manner that it surely won't cause porting problems.

29. Member data should be initialised (where possible) in base member initializer list, not inside the constructor.

30. Make the pre-processor include as few total files as possible, and just put references where safe (use "class SPString;" instead of "#include "SPString.h").

31. No spaces must be used between the "#" and the keyword in a pre-processor directive.

32. All braces should be placed on a line of their own.

33. Inline or otherwise methods written in .h files or template files should, just as normal methods, have a separate body (not in the class declaration), use up multiple lines and have their braces each placed on a line of their own. Placing methods in the .h-file may only be used for optimization purposes.

34. Brute-force optimization (such as inlining) may only be used on methods that will have an apparent performance impact. Otherwise performance will have to be measured to indicate that a certain method needs optimization.

35. GetXxx() and SetXxx(Xxx) methods should be used to access members, with the only exceptions in the constructor base initializer list, and late optimizations. Name methods QueryXxx() instead of GetXxx() when the method makes calculcation or otherwise computes in a way that may cause a latency or a performance penalty.

36. Keyword "void" should not be placed within a method declaration with no parameters.

37. Default parameter value should not be stated in the .cpp file (not even inside a comment).

38. Before making a hack or temporary fix, one must put a comment starting with "TODO:" in uppercase. Use the word "TRICKY:" instead if the code is correctly written, but difficult to understand due to optimization or otherwise circumstances.

39. No comments should be used to start or end classes, methods, typedefs, enums, for and while loops, if statements or any other construction if not for explanatory reasons.

40. Use TABs. TAB-size should be 8. Do not indent lines with ordinary spaces. Try avoiding having lines and line endings containing only white space.

41. There should be at most one single space on each side of a binary operator (e.g a = b + c). Space is not required.

42. Unary operators should not be separated from their operands by any white space (e.g. ++x). Prefix unary operators must be preferred as opposed to postfix unary operators (due to optimization reasons) - use ++x instead of x++.

43. When using the tertiary operator, there should (in most cases) be parentheses around the conditional expression (e.g. x = (a != b)? c : d;).

44. Struct and enum definitions should not be done using the old C-way. 

      E.g. do not write:
      typedef struct _MyStruct
      {
          int m_iMyMember;
      } MyStruct;

      Instead, just write:
      struct MyStruct
      {
          int m_iMyMember;
      };

45. Classes and methods must be named so that their functionallity is easy to grasp, but without overdoing it. Bad examples are CAS, Set() and CalcHashValFromData(). Good examples are String, SetBackgroundImage() and QueryHash() (note that the last method name "QueryHash()" implies a calculation due to its prefix "Query").

46. Variable names should also be picked with care. However, temporary local variables may be named with a single, lowercase letter. Use mathematical notation and standard: x, y, z, p, q, u, v, w and so forth.

47. Never place a return statement anywhere other than at the ending of a method. To avoid high nesting, use the following code pattern:

	bool l_Ok = true;
	if (l_Ok)
	{
		l_Ok = ...;
	}
	if (l_Ok)
	{
		l_Ok = ...;
	}
	return (l_Ok);

    REMEMBER AND LEARN this pattern. If nothing else, this will help you avoid simple mistakes, unused code and most definitely make the code simpler to understand and maintain.

48. When writing abbreviations in for instance method names, only use uppercase on the first letter. This is incorrect: QueryCPUMIPS(). This is correct: QueryCpuMips().

49. Use single line comments (//) only, never multi line comments (/* */). Multi line comments may only be used temporarily to remove code.

49. To simplify reading of code, use comments to clarify #else and #endif statements.

50. Write "0" instead of "NULL" for null pointers.

50. When handling strings, use the Lepra::String class, not the C-style char*. Replace the use of a null pointer with a reference to EmptyString (which is a "" string).

51. All files must end with a single line feed (last line blank). This is required by some compilers.

52. Loop statements that doesn't have any braces/substatements, must have place their ending semicolon indented on the followin line along with a comment.

53. Anything out of the ordinary should be commented. For instance a fall-through in a case-statement (no break) must have a "TRICKY:" comment.

54. Case expressions must be indented within their parent switch-braces (just as any other brace requires indentation). Case expressions can be written in two ways: 1) if only a maximum of one statment is executed in the case, it may be written on one line, otherwise 2) a brace must follow the case, and end before the break.

1)	switch(...)
	{
		case ...:	...;	break;
		case ...:	...;	break;
	}

2)	switch(...)
	{
		case ...:
		{
			...;
		}
		break;
		case ...:
		{
			...;
		}
		break;
	}
