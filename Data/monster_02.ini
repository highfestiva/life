; Author: Jonas Byström
; Copyright (c) 2009 Righteous Games

[config:general]
type = "dynamic"

[body:.*phys_.*]
mass			= 200
bounce			= 0.9
friction		= 0.9
affected_by_gravity	= True
joint_yaw		= 0	# World-absolute euler angles.
joint_pitch		= 90	# World-absolute euler angles.
material		= "small_metal"


; -------------------- Specific parts. --------------------

[body:.*phys_body]
mass			= 1500
connector_types		= ["connectee_3dof"]

[body:.*phys_wheel.*]
bounce			= 0.001
friction		= 0.2
joint			= "suspend_hinge"
joint_spring_constant	= 15
joint_spring_damping	= 0.5
material		= "rubber"

[body:.*phys_wheel._f]
joint			= "hinge2"
joint_stops		= [-20, 20]

[body:.*phys_wheel._r]
friction		= 0.21


; -------------------- Engines. --------------------

[engine:acc]
type			= "hinge_roll"
strength		= 2.5
max_velocity		= [35, -15]
friction		= 0.01	; Constant part of engine strength when input % applied. Engine breaks.
controller_index	= 0
connected_to		= [(".*phys_wheel._f", +1, "normal"), (".*phys_wheel._r", +0.9, "normal")]

[engine:turn]
type			= "hinge2_turn"
strength		= 2
max_velocity		= [0.5, 0]
friction		= 0.96	; In this type of engine: lets turning depend on speed, so it's harder to flip over due to hard turns.
controller_index	= 1
connected_to		= [(".*phys_wheel._f", +1, "normal")]

[engine:break]
type			= "hinge_break"
strength		= 4
input_threashold	= 0.02		; Note: variable only declared for clarity.
max_velocity		= [%(input_threashold)s, 0]
controller_index	= 2
; Normal breaks (all, scaled >= 0) and handbreak (nodes with high scaling values).
connected_to		= [(".*phys_wheel._f", 0, "normal"), (".*phys_wheel._r", 100, "normal")]


; -------------------- Tags. --------------------

[tag:eye0]
type			= "eye"
float_values		= [-0.3]
string_values		= []
phys_list		= [".*phys_wheel1_f"]
engine_list		= []
mesh_list		= [".*m_eye0"]

[tag:eye1]
type			= "eye"
float_values		= [-0.3]
string_values		= []
phys_list		= [".*phys_wheel2_f"]
engine_list		= []
mesh_list		= [".*m_eye1"]

[tag:engine_sound]
type			= "engine_sound"
float_values		= [0.4,2.7,1,   1.5,5,1,   0,0.5,1,	1]	; Low, high, exponent for: pitch, volume, intensity. One intensity factor for each engine.
string_values		= ["monster.wav"]
phys_list		= [".*phys_body"]
engine_list		= [".*engine:acc"]
mesh_list		= []

[tag:child_upright_stability]
type			= "upright_stabilizer"
float_values		= [2.3]	; 1 means normal stability.
string_values		= []
phys_list		= [".*phys_body"]
engine_list		= []
mesh_list		= []


; -------------------- Materials. --------------------

[material:.*m_eye.]
shader			= "blend"
