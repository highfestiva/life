; Author: Jonas Byström
; Copyright (c) 2009 Righteous Games

[config:general]
type = "static"

[body:.*\|phys_.*]
affected_by_gravity	= False
mass			= 1
bounce			= 0.4
friction		= 0.7
material		= "concrete"

[body:.*phys_ground.*]
material		= "grass"

[body:.*phys_floor.]
material		= "big_metal"

[body:.*phys_ramp.]
material		= "big_metal"

[body:.*phys_tree.*]
material		= "wood"

[body:.*phys_race_track_railing.*]
friction		= 1e-8
material		= "glass"

[body:.*phys_mill_blade]
mass			= 200
joint			= "hinge"
joint_yaw		= 90	# World-absolute euler angles.
joint_pitch		= 90	# World-absolute euler angles.
joint_stops		= [-100000, 100000]	; Disable hinge stops.
material		= "plastic"

[body:.*phys_mill_blade1]
mass			= 200
material		= "plastic"

[body:.*phys_elevator]
affected_by_gravity	= False
mass			= 1000
bounce			= 0.1
friction		= 0.5
joint			= "slider"
joint_stops		= [-0.05, 19.4]
joint_yaw		= 0	# World-absolute euler angles.
joint_pitch		= 0	# World-absolute euler angles.

[body:.*phys_monster_railing.*]
friction		= 1e-8
material		= "glass"

[body:.*phys_monster_.ump.*]
material		= "big_metal"

[body:.*phys_monster_bridge.*]
material		= "big_metal"

[body:.*phys_monster_obstacle.*]
material		= "big_metal"

[body:.*phys_monster_horiz_elevator]
affected_by_gravity	= False
mass			= 1000
bounce			= 0.1
friction		= 0.5
joint			= "slider"
joint_stops		= [-75.8, 0.05]
joint_yaw		= 0	# World-absolute euler angles.
joint_pitch		= 90	# World-absolute euler angles.

[body:.*phys_garage_door.*]
mass			= 100
joint			= "hinge"
joint_stops		= [-90, 90]
joint_yaw		= 0	# World-absolute euler angles.
joint_pitch		= 0	# World-absolute euler angles.
material		= "wood"


; -------------------- Engines. --------------------

[engine:windmill]
type			= "hinge_gyro"
strength		= 0.2
max_velocity		= [3, 3]
friction		= -1	; Must be negative, or gyro will try to turn parent (=world :) when accelerating.
controller_index	= 0
connected_to		= [(".*phys_mill_blade", +1, "normal")]

[engine:vert_elevator]
type			= "slider_force"
strength		= 500
max_velocity		= [5.0, 5.0]
controller_index	= 1
connected_to		= [(".*phys_elevator", -1, "half_lock")]

[engine:horiz_elevator]
type			= "slider_force"
strength		= 3
max_velocity		= [5.0, 5.0]
controller_index	= 2
connected_to		= [(".*phys_monster_horiz_elevator", -1, "half_lock")]


; -------------------- Tags. --------------------

[tag:vert_elevator_sound]
type			= "engine_sound"
float_values		= [0.5,4,1,   0,10,0.5,   0,0.5,1,	1]	; Low, high, exponent for: pitch, volume, intensity. One intensity factor for each engine.
string_values		= ["elevator.wav"]
phys_list		= [".*phys_elevator"]
engine_list		= [".*engine:vert_elevator"]
mesh_list		= []

[tag:horiz_elevator_sound]
type			= "engine_sound"
float_values		= [0.5,4,1,   0,10,0.5,   0,0.5,1,	1]	; Low, high, exponent for: pitch, volume, intensity. One intensity factor for each engine.
string_values		= ["elevator.wav"]
phys_list		= [".*phys_monster_horiz_elevator"]
engine_list		= [".*engine:horiz_elevator"]
mesh_list		= []


; -------------------- Triggers. --------------------

[trigger:vert_elevator_top]
type			= "movement"
function		= "trig_elevator"
priority		= 2
triggered_by		= "phys_trig_elevator_top"
connected_to		= [(".*engine:vert_elevator", 0, "maximum")]	; Engine, delay, function.

[trigger:vert_elevator_bottom]
type			= "movement"
function		= "trig_elevator"
priority		= 2
triggered_by		= "phys_trig_elevator_bottom"
connected_to		= [(".*engine:vert_elevator", 0, "minimum")]	; Engine, delay, function.

[trigger:vert_elevator_on_board]
type			= "movement"
function		= "trig_elevator"
priority		= 1
triggered_by		= "phys_trig_elevator_on_board"
connected_to		= [(".*engine:vert_elevator", 4, "toggle")]	; Engine, delay, function.

[trigger:horiz_elevator_timer]
type			= "always"
function		= "trig_elevator"
priority		= 1
triggered_by		= ""
connected_to		= [(".*engine:horiz_elevator", 8, "toggle")]	; Engine, delay, function.


; -------------------- Spawn engines. --------------------

[spawner:spawn_toys1]
type			= "immediate"
function		= "spawner"
connected_to		= "phys_spawn_toys1"
number			= 40
interval		= 0
spawn_objects		= [("stone", 0.8), ("cube", 0.2)]	; (Object, probability), ...

[spawner:spawn_toys2]
type			= "immediate"
function		= "spawner"
connected_to		= "phys_spawn_toys2"
number			= 40
interval		= 0
spawn_objects		= [("stone", 0.7), ("cube", 0.3)]	; (Object, probability), ...

[spawner:spawn_toys3]
type			= "immediate"
function		= "spawner"
connected_to		= "phys_spawn_toys3"
number			= 16
interval		= 0
spawn_objects		= [("stone", 0.5), ("cube", 0.5)]	; (Object, probability), ...


; -------------------- Materials. --------------------

[material:.*m_tree_leaves.*]
shader			= "blend"
