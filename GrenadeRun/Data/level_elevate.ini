; Author: Jonas Byström
; Copyright (c) 2009 Righteous Games

[config:general]
type = "static"

[body:.*\|phys_.*]
affected_by_gravity	= False
mass			= 1
bounce			= 0.7
friction		= 0.9
material		= "grass"

[body:.*phys_long_elevator]
mass			= 1000
bounce			= 0.1
friction		= 0.5
joint			= "slider"
joint_stops		= [-10.154, 0]
joint_yaw		= 45	# World-absolute euler angles.
joint_pitch		= 10	# World-absolute euler angles.

[body:.*phys_elevator2]
mass			= 800
bounce			= 0.1
friction		= 0.5
joint			= "slider"
joint_stops		= [0, +7.17]
joint_yaw		= 0	# World-absolute euler angles.
joint_pitch		= 0	# World-absolute euler angles.

[body:.*phys_horiz_elevator]
mass			= 2000
bounce			= 0.1
friction		= 0.5
joint			= "slider"
joint_stops		= [0.05, +44.6]
joint_yaw		= 45	# World-absolute euler angles.
joint_pitch		= 90	# World-absolute euler angles.

[body:.*phys_trampoline]
mass			= 2000
bounce			= 0.2
friction		= 0.5
joint			= "slider"
joint_stops		= [-4.5, 0]
joint_yaw		= 135	# World-absolute euler angles.
joint_pitch		=  10	# World-absolute euler angles.


; -------------------- Engines. --------------------

[engine:long_elevator]
type			= "slider_force"
strength		= 10
max_velocity		= [10.0, 0.8]
controller_index	= 1
connected_to		= [(".*phys_long_elevator", +1, "half_lock")]

[engine:elevator2]
type			= "slider_force"
strength		= 10
max_velocity		= [4.0, 4.0]
controller_index	= 1
connected_to		= [(".*phys_elevator2", +1, "half_lock")]

[engine:horiz_elevator]
type			= "slider_force"
strength		= 10
max_velocity		= [2, 2]
controller_index	= 1
connected_to		= [(".*phys_horiz_elevator", +1, "half_lock")]

[engine:trampoline]
type			= "slider_force"
strength		= 43
max_velocity		= [1, 43]
controller_index	= 1
connected_to		= [(".*phys_trampoline", +1, "half_lock")]


; -------------------- Tags. --------------------

[tag:ctf]
type			= "stunt_trigger_data"
float_values		= [0,0,-6.3,  10]	; XYZ start offset, time to move to captured position
string_values		= []
phys_list		= []
engine_list		= []
mesh_list		= [".*m_flag"]

[tag:see_through]
type			= "see_through"
float_values		= [0.4, 1, 0,0,-5, 18,18,6]	; Target transparency, original transparency, XYZ offset, XYZ size.
string_values		= []
phys_list		= [".*phys_bridge3"]
engine_list		= []
mesh_list		= [".*m_bridge"]

[tag:path1_to_slow_elevator]
type			= "context_path"
float_values		= [1]			; 1 = Normal chance.
string_values		= ["to_elevator"]
phys_list		= [".*phys_pos_path_start", ".*phys_pos_path1_+."]
engine_list		= []
mesh_list		= []

[tag:long_elevator_sound]
type			= "engine_sound"
float_values		= [0,   0.5,4,1,   0,10,0.5,   0,0.5,1,	1]	; Throttle factor. Low, high, exponent for: pitch, volume, intensity. One intensity factor for each engine.
string_values		= ["elevator.wav"]
phys_list		= [".*phys_long_elevator"]
engine_list		= [".*engine:long_elevator"]
mesh_list		= []

[tag:elevator2_sound]
type			= "engine_sound"
float_values		= [0,   0.5,4,1,   0,10,0.5,   0,0.5,1,	1]	; Throttle factor. Low, high, exponent for: pitch, volume, intensity. One intensity factor for each engine.
string_values		= ["elevator.wav"]
phys_list		= [".*phys_elevator2"]
engine_list		= [".*engine:elevator2"]
mesh_list		= []

[tag:horiz_elevator_sound]
type			= "engine_sound"
float_values		= [0,   0.5,4,1,   0,10,0.5,   0,0.5,1,	1]	; Throttle factor. Low, high, exponent for: pitch, volume, intensity. One intensity factor for each engine.
string_values		= ["elevator.wav"]
phys_list		= [".*phys_horiz_elevator"]
engine_list		= [".*engine:horiz_elevator"]
mesh_list		= []


; -------------------- Triggers. --------------------

[trigger:ctf]
type			= "always"
function		= "trig_ctf"
priority		= 0
triggered_by		= [".*phys_trig_ctf"]
connected_to		= []	; Engine, delay, function.

[trigger:long_elevator_timer]
type			= "always"
function		= "trig_elevator"
priority		= 1
triggered_by		= []
connected_to		= [(".*engine:long_elevator", 1.5, "toggle")]	; Engine, delay, function.

[trigger:elevator2_timer]
type			= "always"
function		= "trig_elevator"
priority		= 1
triggered_by		= []
connected_to		= [(".*engine:elevator2", 3, "toggle")]	; Engine, delay, function.

[trigger:horiz_elevator_timer]
type			= "always"
function		= "trig_elevator"
priority		= 1
triggered_by		= []
connected_to		= [(".*engine:horiz_elevator", 3, "toggle")]	; Engine, delay, function.

[trigger:trampoline_fire]
type			= "movement"
function		= "trig_elevator"
priority		= 2
triggered_by		= [".*phys_trig_trampoline"]
connected_to		= [(".*engine:trampoline", 0.2, "minimum")]	; Engine, delay, function.

[trigger:trampoline_retract]
type			= "always"
function		= "trig_elevator"
priority		= 1
triggered_by		= []
connected_to		= [(".*engine:trampoline", 30, "maximum")]	; Engine, delay, function.


; -------------------- Materials. --------------------                                                            

[material:.*m_leaves.*]
shader			= "blend"

[material:.*m_flag]
shader			= "highlight"
