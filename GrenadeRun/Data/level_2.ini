; Author: Jonas Byström
; Copyright (c) 2009 Righteous Games

[config:general]
type = "static"

[body:.*\|phys_.*]
affected_by_gravity	= False
mass			= 1
bounce			= 0.7
friction		= 0.9
material		= "grass"

[body:.*phys_tree.*]
material		= "wood"

[body:.*phys_wrecking_ball]
mass			= 7000
joint			= "ball"
joint_yaw		= 90	# World-absolute euler angles.
joint_pitch		= 90	# World-absolute euler angles.
joint_stops		= [-100000, 100000]	; Disable joint stops.
material		= "big_metal"


; -------------------- Tags. --------------------

[tag:ctf]
type			= "stunt_trigger_data"
float_values		= [0,0,-9.5,  12]	; XYZ start offset, time to move to captured position
string_values		= []
phys_list		= []
engine_list		= []
mesh_list		= [".*m_flag"]

[tag:see_through]
type			= "see_through"
float_values		= [0.5, 1, 10, 6]	; Target transparency, original transparency, outer radius, inner radius.
string_values		= []
phys_list		= [".*phys_bridge"]
engine_list		= []
mesh_list		= [".*m_bridge_planks"]

[tag:path1_straight]
type			= "context_path"
float_values		= [0.3]			; 1 = Normal chance.
string_values		= []
phys_list		= [".*phys_pos_path_start", ".*phys_pos_path1_+.", ".*phys_pos_path_end"]
engine_list		= []
mesh_list		= []

[tag:path1_right]
type			= "context_path"
float_values		= [0.4]			; 1 = Normal chance.
string_values		= []
phys_list		= [".*phys_pos_path_start", ".*phys_pos_path1_[123]", ".*phys_pos_path_random_2", ".*phys_pos_path1_[45]", ".*phys_pos_path_end"]
engine_list		= []
mesh_list		= []

[tag:path1_left]
type			= "context_path"
float_values		= [0.4]			; 1 = Normal chance.
string_values		= []
phys_list		= [".*phys_pos_path_start", ".*phys_pos_path1_[123]", ".*phys_pos_path_random_[01]", ".*phys_pos_path1_5", ".*phys_pos_path_end"]
engine_list		= []
mesh_list		= []

[tag:path2_straight]
type			= "context_path"
float_values		= [0.4]			; 1 = Normal chance.
string_values		= []
phys_list		= [".*phys_pos_path_start", ".*phys_pos_path2_+.", ".*phys_pos_path_end"]
engine_list		= []
mesh_list		= []

[tag:path2_left_right]
type			= "context_path"
float_values		= [0.4]			; 1 = Normal chance.
string_values		= []
phys_list		= [".*phys_pos_path_start", ".*phys_pos_path2_[123]", ".*phys_pos_path3_[34]", ".*phys_pos_path3_4", ".*phys_pos_path2_[567]", ".*phys_pos_path_end"]
engine_list		= []
mesh_list		= []

[tag:path3]
type			= "context_path"
float_values		= [0.5]			; 1 = Normal chance.
string_values		= []
phys_list		= [".*phys_pos_path_start", ".*phys_pos_path3_+.", ".*phys_pos_path2_[567]", ".*phys_pos_path_end"]
engine_list		= []
mesh_list		= []

[tag:path4_straight]
type			= "context_path"
float_values		= [0.4]			; 1 = Normal chance.
string_values		= []
phys_list		= [".*phys_pos_path_start", ".*phys_pos_path1_[123]", ".*phys_pos_path4_+.", ".*phys_pos_path_end"]
engine_list		= []
mesh_list		= []

[tag:path4_fool]
type			= "context_path"
float_values		= [0.4]			; 1 = Normal chance.
string_values		= []
phys_list		= [".*phys_pos_path_start", ".*phys_pos_path1_[123]", ".*phys_pos_path_random_[01]", ".*phys_pos_path4_[123]", ".*phys_pos_path_end"]
engine_list		= []
mesh_list		= []


; -------------------- Triggers. --------------------

[trigger:ctf]
type			= "always"
function		= "trig_ctf"
priority		= 0
triggered_by		= [".*phys_trig_ctf"]
connected_to		= []	; Engine, delay, function.


; -------------------- Spawn engines. --------------------

[spawner:spawn_cube1]
type			= "creator"
function		= "spawner"
connected_to		= "phys_pos_cube1"
number			= 1
intervals		= [1, 0]
spawn_objects		= [("cube", 1)]	; (Object, probability), ...

[spawner:spawn_cube2]
type			= "creator"
function		= "spawner"
connected_to		= "phys_pos_cube2"
number			= 1
intervals		= [1, 0]
spawn_objects		= [("cube", 1)]	; (Object, probability), ...

[spawner:spawn_cube3]
type			= "creator"
function		= "spawner"
connected_to		= "phys_pos_cube3"
number			= 1
intervals		= [1, 0]
spawn_objects		= [("cube", 1)]	; (Object, probability), ...


; -------------------- Materials. --------------------                                                            

[material:.*m_tree_leaves.*]
shader                  = "blend"

[material:.*m_flag]
shader                  = "highlight"
