; Lever, exit hangar
; Author: Jonas Byström

[config:general]
type			= "world"

[body:.*\|phys_.*]
affected_by_gravity	= False
mass			= 1
bounce			= 0.4
friction		= 1.0
material		= "big_metal"


; -------------------- Specific parts. --------------------

[body:.*phys_(floor|.*pad)]
material		= "concrete"

[body:.*phys_ground]
material		= "grass"

[body:.*phys_(wall.*|roof)]
friction		= 0.7

[body:.*phys_lever]
mass			= 100
bounce			= 0.15
joint			= "hinge"
joint_stops		= [-10, +0.1]
joint_yaw		= -90	; World-absolute euler angles.
joint_pitch		= 90	; World-absolute euler angles.
material		= "rubber"

[body:.*phys_flap]
mass			= 200
bounce			= 0.15
joint			= "slider"
joint_stops		= [-0.1, +26]
joint_yaw		= 0	; World-absolute euler angles.
joint_pitch		= 0	; World-absolute euler angles.

[body:.*phys_exit]
mass			= 500
bounce			= 0.11
joint			= "slider"
joint_stops		= [-0.1, +50]
joint_yaw		= 90	; World-absolute euler angles.
joint_pitch		= 90	; World-absolute euler angles.

[body:.*phys_(trig_exit|lever)]
collide_with_self	= True


; -------------------- Engines. --------------------

[engine:lever_move_up]
type			= "hinge_roll"
strength		= 2
max_velocity		= [0.1, 0.1]
friction		= 0.5
controller_index	= 0
connected_to		= [(".*phys_lever", +1, "half_lock")]

[engine:flap]
type			= "slider_force"
strength		= 4
max_velocity		= [15.0, 15.0]
friction		= 0.5
controller_index	= 1
connected_to		= [(".*phys_flap", -1, "half_lock")]

[engine:exit]
type			= "slider_force"
strength		= 4
max_velocity		= [20.0, 20.0]
friction		= 0.5
controller_index	= 2
connected_to		= [(".*phys_exit", +1, "half_lock")]


; -------------------- Tags. --------------------

[tag:landing_smooth_pad]
type			= "anything"
float_values		= []
string_values		= []
phys_list		= [".*phys_startingpad", ".*phys_landingpad"]
engine_list		= []
mesh_list		= []

[tag:landing_finish_trigger]
type			= "stunt_trigger_data"
float_values		= [0,0.1,0.1, 1,3]	; Min & max speed through trigger, min time inside trigger, real time ratio, duration.
string_values		= ["", ""]
phys_list		= [".*phys_trig_landing"]
engine_list		= []
mesh_list		= []

[tag:player_path]
type			= "context_path"
float_values		= [1]			; 1 = Normal chance.
string_values		= ["player_path"]
phys_list		= [".*phys_pos_path_start", ".*phys_pos_path_+\d*", ".*phys_pos_path_land"]
engine_list		= []
mesh_list		= []

[tag:background]
type			= "textures"
float_values		= []
string_values		= ["bg_river_01.png"]
phys_list		= []
engine_list		= []
mesh_list		= []

[tag:flap_gate_sound]
type			= "engine_sound"
float_values		= [0,   0.5,4,1,   0,1,0.5,   0,0.5,1,	1]	; Throttle factor. Low, high, exponent for: pitch, volume, intensity. One intensity factor for each engine.
string_values		= ["elevator.wav"]
phys_list		= [".*phys_flap"]
engine_list		= [".*engine:flap"]
mesh_list		= []

[tag:exit_gate_sound]
type			= "engine_sound"
float_values		= [0,   0.5,4,1,   0,1,0.5,   0,0.5,1,	1]	; Throttle factor. Low, high, exponent for: pitch, volume, intensity. One intensity factor for each engine.
string_values		= ["elevator.wav"]
phys_list		= [".*phys_exit"]
engine_list		= [".*engine:exit"]
mesh_list		= []

[tag:lever_blink]
type			= "blink_light"
float_values		= [0.5,0.5,1, 0.5,0.3,0.5, 0,0,1]	; RGB offset, amplitude and speed.
string_values		= []
phys_list		= []
engine_list		= []
mesh_list		= [".*m_lever_head"]

[tag:undergrowth]
type			= "mass_objects"
float_values		= [200]
string_values		= ["flower"]
phys_list		= [".*phys_ground"]
engine_list		= []
mesh_list		= []


; -------------------- Triggers. --------------------

[trigger:stunt_time]
type			= "movement"
function		= "real_time_ratio"
priority		= 1
triggered_by		= [".*phys_trig_landing"]
connected_to		= []

[trigger:activate_lever]
type			= "always"
function		= "trig_elevator"
priority		= 1
triggered_by		= []
connected_to		= [(".*engine:lever_move_up", 10, "minimum")]	; Engine, delay, function.

[trigger:flap_decend]
type			= "movement"
function		= "trig_elevator"
priority		= 1
triggered_by		= [".*phys_trig_flap_descend."]
connected_to		= [(".*engine:flap", 0, "minimum")]	; Engine, delay, function.

[trigger:flap_acend]
type			= "movement"
function		= "trig_elevator"
priority		= 1
triggered_by		= [".*phys_trig_flap_ascend"]
connected_to		= [(".*engine:flap", 0, "maximum")]	; Engine, delay, function.

[trigger:open_exit]
type			= "movement"
function		= "trig_elevator"
priority		= 2
triggered_by		= [".*phys_trig_exit"]
connected_to		= [(".*engine:exit", 0, "maximum")]	; Engine, delay, function.


; -------------------- Spawn engines. --------------------

[spawner:spawn_player]
type			= "creator"
function		= "spawner"
connected_to		= [".*phys_pos_start"]
number			= 0
intervals		= [0, 0]
spawn_objects		= [("", 1)]	; (Object, probability), ...
pos_scale		= 0

[spawner:spawn_coffin]
type			= "creator"
function		= "spawner"
connected_to		= [".*phys_pos_pallet."]
number			= 4
intervals		= [0.1, 0]
spawn_objects		= [("pallet", 1)]	; (Object, probability), ...
pos_scale		= 0
ease_down		= True


; -------------------- Materials. --------------------

[material:.*m_hangar]
two_sided		= True

[material:.*m_(hangar|roof|floor|exit|exit_.*)]
casts_shadows		= False
