Vector3DF -> vec3
Event callbacks: ticks and timers. Fix so no specialcasing for alarms are needed.
Use immutability to keep things organized!
Get unit tests running again.
Fix texturing, which I broke during migration to Maya 2014.

----

Move default settings into application-specific class.
Convert GameManager, etc., into components instead of a inheritance frameworks. These components should have default behaviours, which can be overriden.
Convert ConsoleManager, etc., into components instead of inheritance frameworks.
Don't allow ConsoleManager to crash. (E.g. running "set-player-count" without a starting "yield".)
Move game state handling from game manager to other classes: logo renderer, menu renderer, game, preview, explanation...
Init physics and mesh from memory. No resource sharing for those two! Might create resources for gfx card uploading and easy tracking?
Fix separate environments: one for physics editor/menu, another for game. Peuh!

Network:
Move hardcoded messages into separate classes. Use factories instead of enums.
Move distributed 2D MMO logic into separate classes.
Create tests for the logic in these classes!
Create separate UI master & server applications to test these with an overview. For instance run one master, two servers, two clients...
Servers must regularly report load to master, so it can make intelligent suggestions about movement.
Master makes optimal server moves based on load info from servers. It also makes sure that all server areas are as convex as possible.
Master must be able to inform servers about patch movement, and servers must be able to inform clients about patch movement.
Make master server connection API an interface. Rename current API "distinct", create a new one called "massively distributed".
Move the "DB" interface and login function from server to master. Make the code handling this into two separate parts: Distinct and MassivelyDistributed. Create a MassivelyDistributedMasterServer application.
Make client handle several simultaneous server connections, and only send positions to those in close (upcoming) range. Clients send "disconnect" message to servers when they leave (far from boundaries).
Client must know server boundaries, and ask master for upcoming servers' boundaries when getting close to border.
Servers *mostly* hold objects in own area, but destroy objects for clients that haven't answered anything in a long while.
Both server and client must be able to ask and inform one another about positional info, classes (i.e. materials, xforms, tags for sounds, etc.), meshes and physics.
When servers move, they must tell clients to ask for patch ownership updates from master.